import { Component, OnInit, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { RestapiService } from '../service/restapi.service';
import { MatSnackBar } from '@angular/material/snack-bar';
import { PatientWebsocketService } from '../service/patient-websocket.service';

@Component({
  selector: 'app-patient-list',
  templateUrl: './patient-list.component.html',
  styleUrls: ['./patient-list.component.css']
})
export class PatientListComponent implements OnInit, OnDestroy {
  closeTimer$ = new Subject<any>();
  patientData: any;

  constructor(
    private restApiService: RestapiService,
    private snackBar: MatSnackBar,
    private websocketService: PatientWebsocketService
  ) {}

  ngOnInit(): void {
    this.websocketService.connect().subscribe({
      next: (data: any) => {
        if (data && data.patients) {
          this.patientData = data.patients; // Update patient data on WebSocket message
          this.showNotification('New data available');
        }
      },
      error: (error: any) => {
        console.error('WebSocket error:', error);
        this.showNotification('Error occurred during WebSocket connection');
        this.closeTimer$.next(); // Stop WebSocket connection on error
      }
    });
  }

  ngOnDestroy(): void {
    this.closeTimer$.next(); // Close WebSocket connection when the component is destroyed
  }

  private showNotification(message: string) {
    this.snackBar.open(message, 'Close', {
      duration: 3000,
    });
  }
}




import { Component, OnInit, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { RestapiService } from '../service/restapi.service';
import { MatSnackBar } from '@angular/material/snack-bar';
import { PatientWebsocketService } from '../service/patient-websocket.service';

@Component({
  selector: 'app-patient-list',
  templateUrl: './patient-list.component.html',
  styleUrls: ['./patient-list.component.css']
})
export class PatientListComponent implements OnInit, OnDestroy {
  closeTimer$ = new Subject<any>();
  patientData: any;

  constructor(
    private restApiService: RestapiService,
    private snackBar: MatSnackBar,
    private websocketService: PatientWebsocketService
  ) {}

  ngOnInit(): void {
    this.websocketService.connect().subscribe({
      next: (data: any) => {
        if (data && data.patients) {
          this.patientData = data.patients; // Update patient data on WebSocket message
          this.showNotification('New data available');
        }
      },
      error: (error: any) => {
        console.error('WebSocket error:', error);
        this.showNotification('Error occurred during WebSocket connection');
        this.closeTimer$.next(); // Stop WebSocket connection on error
      }
    });
  }

  ngOnDestroy(): void {
    this.closeTimer$.next(); // Close WebSocket connection when the component is destroyed
  }

  private showNotification(message: string) {
    this.snackBar.open(message, 'Close', {
      duration: 3000,
    });
  }
}



import { Injectable } from '@angular/core';
import { webSocket, WebSocketSubject } from 'rxjs/webSocket';
import { MatSnackBar } from '@angular/material/snack-bar';

@Injectable({
  providedIn: 'root'
})
export class PatientWebsocketService {
  private socket$: WebSocketSubject<any>;

  constructor(private snackBar: MatSnackBar) {
    this.socket$ = webSocket('ws://localhost:3000'); // WebSocket URL of JSON Server
  }

  connect(): WebSocketSubject<any> {
    return this.socket$;
  }

  private showNotification(message: string) {
    this.snackBar.open(message, 'Close', {
      duration: 3000,
    });
  }
}




<div class="table-container">
  <table mat-table [dataSource]="patientData" class="mat-elevation-z8">

    <!-- Name Column -->
    <ng-container matColumnDef="name">
      <th mat-header-cell *matHeaderCellDef>Name</th>
      <td mat-cell *matCellDef="let patient">{{ patient.name }}</td>
    </ng-container>

    <!-- MRN Column -->
    <ng-container matColumnDef="mrn">
      <th mat-header-cell *matHeaderCellDef>MRN</th>
      <td mat-cell *matCellDef="let patient">{{ patient.mrn }}</td>
    </ng-container>

    <!-- Priority Column -->
    <ng-container matColumnDef="priority">
      <th mat-header-cell *matHeaderCellDef>Priority</th>
      <td mat-cell *matCellDef="let patient">{{ patient.priority }}</td>
    </ng-container>

    <!-- DOB Column -->
    <ng-container matColumnDef="dob">
      <th mat-header-cell *matHeaderCellDef>Date of Birth</th>
      <td mat-cell *matCellDef="let patient">{{ patient.dob }}</td>
    </ng-container>

    <!-- Columns displayed in the table -->
    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
  </table>
</div>



.table-container {
  width: 100%;
  overflow-x: auto;
}

.mat-table {
  width: 100%;
  border-collapse: collapse;
}

.mat-header-cell,
.mat-cell {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #e0e0e0;
}
